Software Development Plan


General

- Subversion Repository is on xp-dev.com
    http://svn.xp-dev.com/svn/wxextension/

- Subversion access
    under windows TortoiseSVN is used (TortoiseSVN 1.6.8)
      http://tortoisesvn.tigris.org/,
    under Linux just the svn client (svn, version 1.5.4 (r33841))
    
    The SVN support in wxExVCS works with SVN client 1.6.6
      http://www.sliksvn.com/en/download or
      http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100
    
- GIT access
    use
      git svn clone http://svn.xp-dev.com/svn/wxextension/
    to create a git clone.
    use
      git commit -a -m "your comment" to update your local repository
      git svn dcommit to commit your changes to svn repository
    use 
      git svn rebase to fetch changes from svn repository
      
- Source code      
  - STL is used wherever possible, instead of wxWidgets containers
  
  - Coding standard follows:
      http://www.gnu.org/prep/standards/standards.html
      and wxWidgets guidelines
      http://www.wxwidgets.org/develop/standard.htm

  - GUI development library wxWidgets (2.8 branch, 2.9 branch, and trunk)
      http://www.wxwidgets.org/

  - database is OTL (Version 4.0.214)
      http://otl.sourceforge.net/

- icons and bitmaps
    menu and toolbar bitmaps are from wxWidgets, using wxArtProvider, 
    or gtk stock items
    application icons are from
    http://www.famfamfam.com/lab/icons/silk/
    and converted to ico using
    http://www.convertico.com/
    and converted to xpm using GIMP (2.6.6)    
    http://www.gimp.org/

- Documentation
  - API documentation is generated from the sources using Doxygen (1.6.1)
    http://www.stack.nl/~dimitri/doxygen/
  - Other docs are in html format using no special html editor
  - Use bouml for reverse engineering and obtaining class diagrams
    http://bouml.free.fr/index.html

- Automated testing is done using cppunit
    http://sourceforge.net/projects/cppunit
    
- Test coverage is not yet done, it might be done using gcov
    http://gcc.gnu.org/onlinedocs/gcc/Gcov.html

- Translation is done using poedit (1.4.6)
    http://www.poedit.net/
  wxextension has it's own localization file, your application should
  also add it's own one, and also put the standard wxwidgets localization file
  in the localization dir. You should use wxstd for the standard file, if this 
  file cannot be found the locale will not be initialized and translations 
  are off. Currently a separate file wxstd-nl.po is added, as dutch translation
  is updated only for wxWidgets 2.8.0, whereas we use 2.9.0, in the added file
  the extra needed translation are put. 
  The place where to put your po files can be found by running wxex-sample,
  that shows the folder on the status bar.

- Build process/IDE
  - First of all, the new C++ auto keyword is used a lot, so
    you need a recent compiler to compile sources.

  - Project and make files are generated using Bakefile 0.2.8
    http://www.bakefile.org/
    this is done in the build dir, directly under trunk:
    
  - under windows using Microsoft Visual Studio 2010
    Version 10.0.30319.1 RTMRel
    Microsoft .NET Framework files generated 
    using format msvs2008prj
    
  - under linux gcc (Ubuntu 4.4.3-4ubuntu5) 4.4.3
    (no IDE)
    GNUMakefile generated using format gnu

  - finally strip the executable under Windows using UPX
      http://upx.sourceforge.net/
    under Linux just strip it

  - deploy under Windows using JustZIPIt
      http://free-backup-software.net/index.htm
    deploy under Linux using gzip and tar


SVN hierarchy

- branches contain stable releases, and follow the wxWidgets branches
  - currrently 2.9.0 is regarded as a stable branch, 
    though not really for wxWidgets,
  - the 2.8 branch is added to build using the real 
    wxWidgets stable branch,
    it compiles, but with some warnings, and the using build.bkl 
    generated project file does not find the correct wxextension libraries 
    when linking, you have to adjust it manually.

- tags contain all release versions

- trunk contains the development version


When adding functionality in trunk

- document it in the source in doxy way

- if it needs to be translated, add _() around text strings, 
  and update po file(s)

- add a test for it in 
    extension/test/base, 
    extension/test/app,
    extension/test/report,

  where it has least dependancies

  run test-all from the build dir, which collects output in test.log, 
  and commits automatically.

- add a sample for it in
    extension/sample, 
    extension/sample/report


Roadmap
- new wxWidgets. 
    Use GetItemText with col from list ctrl
    Use ribbon toolbar.
    Use cbegin iterators.
    File history has it's own include file. Use it and check new methods,
    and add wxUSE_HISTORY switches.
    Use wxFileSystemWatcher, instead of our own sync methods 
    (at least for listvew file).
    Fix change marker for deleting text 
    (currently it gives stack overflow if enabled).
    
- backspace key in vi should not delete text when not in insert mode        
    
- in vi and stc share replace code

- add gdb front-end

- improve test units, use macro's

- add profile option (see gcc website, g++ -D_GLIBCXX_PROFILE foo.cc)
    or use valgrind

- add ctags (like Exuberant CTAGS)

- use Boost
